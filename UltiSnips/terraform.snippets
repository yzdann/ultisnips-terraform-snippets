# terraform
snippet terraform "terraform required providers"
terraform {
	required_providers {
		${1:name} = {
			source  = "${2:source}"
			version = "${3:version}"
		}
	}
}
endsnippet

snippet terraform_req_aws "terraform with aws required provider"
terraform {
	required_providers {
		aws = {
			source  = "hashicorp/aws"
			version = "${1:~> 3.0}"
		}
	}
}
endsnippet

# variable
snippet vari "variable"
variable "${1:name}" {
	type = $2
	default = $3
	description = $4
}
endsnippet

snippet var_em "variable with empty brackets"
variable "${1:name}" {}
endsnippet

# providers
snippet provider
provider "${1:name}" {
	${2:config}
}
endsnippet

snippet provider_aws
provider "aws" {
	profile = var.profile
	region = "${var.${1:region}}"
	alias = "${var.${2:alias}}"
}
endsnippet

snippet provider_openstack
provider "openstack" {
	user_name  = "${var.user_name}"
	tenant_name = "${var.tenant_name}"
	password  = "${var.password}"
	auth_url  = "${var.auth_url}"
}
endsnippet

snippet provider_docker
provider "docker" {
	host = "${1:${var.host}}"
}
endsnippet

snippet provider_google
provider "google" {
	account_file = "${file("account.json")}"
	project = "my-gce-project"
	region = "us-central1"
}
endsnippet

snippet provider_digitalocean
provider "digitalocean" {
	token = "${var.do_token}"
}
endsnippet

snippet provider_consul
provider "consul" {
	address = "demo.consul.io:80"
	datacenter = "nyc1"
}
endsnippet

# resource
snippet resource
resource "${1:type}" "${2:name}" {
	${3:config}
}
endsnippet

## resource aws
snippet resource_aws_vpc "aws vpc" 
resource "aws_vpc" "${1:name}" {
	provider = aws.${2:alias}
	cidr_block           = "${3:10.0.0.0/16}"
	enable_dns_support   = true
	enable_dns_hostnames = true
	tags = {
		Name = "${4:$1}"
	}
}
endsnippet

snippet resource_subnet
resource "aws_subnet" "${1:name}" {
	provider = aws.${2:alias}
	vpc_id     = aws_vpc.${3:vpc_name}.id
	cidr_block = "${4:10.0.1.0/24}"
	availability_zone = "$5"
	tags = {
		Name = "${6:$1}"
	}
}
endsnippet

snippet resource_route_table
resource "aws_route_table" "${1:name}" {
	vpc_id = "${aws_vpc.web_vpc.id}"
	route {
		cidr_block = $2 
		gateway_id = "${aws_internet_gateway.${3:web_igw}.id}"
	}
	tags = {
		Name = "${4:$1}"
	}
}
endsnippet

snippet resource_route_table_association
resource "aws_route_table_association" "$1" {
	subnet_id = "${aws_subnet.$2.id}"
	route_table_id = "${aws_route_table.$3.id}"
}
endsnippet

snippet resource_aws_instance
resource "aws_instance" "${1:name}" {
	provider = aws.${2:alias}
	ami = "${3:ami-383c1956}"
	instance_type = "${4:t2.micro}"
	subnet_id     = aws_subnet.$5.id 
	vpc_security_group_ids = ["${aws_security_group.$6.id}"]
	tags = {
		Name = "${7:$1}"
	}
}
endsnippet

snippet resource_route53_record "Resource for a route53 record"
resource "aws_route53_record" "$1" {
	provider = aws.${2:alias}
	zone_id = "$3"
	name = "$4"
	type = "$5"
	ttl = "${6:300}"
	records = $7
}
endsnippet

snippet resource_template_file "Template file resource"
resource "template_file" "$1" {
	filename = "$1"
	vars {
		$2
	}
}
endsnippet

snippet resource_aws_elb
resource "aws_elb" "$1" {
	provider = aws.${2:alias}
	name = "${3:web-elb}"
	subnets = ["${aws_subnet.${4:public_subnet}.*.id}"]
	security_groups = ["${aws_security_group.${5:sg}.id}"]
	instances = ["${aws_instance.${6:web_instance}.*.id}"]

	# Listen for HTTP requests and distribute them to the instances
	listener { 
		instance_port     = 80
		instance_protocol = "http"
		lb_port           = 80
		lb_protocol       = "http"
	}

	health_check {
		healthy_threshold = 2
		unhealthy_threshold = 2
		timeout = 3
		target = "HTTP:80/"
		interval = 10
	}
}
endsnippet

snippet resource_aws_sg
resource "aws_security_group" "$1" {
	provider = aws.${2:alias}
	name        = "${3:$1}"
	description = "$4"
	vpc_id      = "${aws_vpc.$5.id}"

	ingress {
		from_port   = $6
		to_port     = $7
		protocol    = "tcp"
		cidr_blocks = ["${8:0.0.0.0/0}"]
		security_groups = ["${aws_security_group.$9.id}"]
	}

	egress {
		from_port = ${10:0} 
		to_port = ${11:0} 
		protocol = "${12:-1}"
		cidr_blocks = ["${13:0.0.0.0/0}"]
		security_groups = ["${aws_security_group.$10.id}"]
	}
}
endsnippet

snippet resource_aws_eip
	resource "aws_eip" "${1:name}" {
	provider = aws.${2:alias}
	instance = "aws_instance.${3:$1}.id"
	vpc = ${4:true}
}
endsnippet

snippet resource_aws_key_pair
	resource "aws_key_pair" "${1:name}" {
	provider = aws.${2:alias}
	key_name = "${3:$1}"
	public_key = "${4:public_key}"
}
endsnippet

snippet resource_aws_security_group
	resource "aws_security_group" "${1:name}" {
	provider = aws.${2:alias}
	name = "${3:$1}"
	description = "${4:desc}"

	ingress {
		from_port = ${4:from_port}
		to_port = ${5:to_port}
		protocol = "${5:tcp}"
		cidr_blocks = ["${6:0.0.0.0/0}"]
	}

	egress {
		from_port = ${7:0}
		to_port = ${8:0}
		protocol = "${9:-1}"
		cidr_blocks = [${10:"0.0.0.0/0"}]
	}
}
endsnippet

snippet resource_aws_s3_bucket
resource "aws_s3_bucket" "${1:name}" {
	provider = aws.${2:alias}
	bucket = "${3:$1}"
	acl = "${4:private}"
}
endsnippet

snippet resource_aws_s3_bucket_static_web
resource "aws_s3_bucket" "${1:name}" {
	provider = aws.${2:alias}
	bucket = "${3:$1}"
	acl = "${4:private}"
	policy = "${5:${file("policy.json")}}"

	website {
		index_document = "${7:index.html}"
		error_document = "${8:error.html}"
	}
}
endsnippet

## other

snippet output
output "${1:name}" {
	value = "${2:${aws_instance.foo.public_ip}}"
}
endsnippet

snippet tags
tags = {
	Name = "${2:value}"
}
endsnippet


## funcs
snippet lookup "Lookup function" w
\$\{lookup(var.${1:map}, ${2:key})\}
endsnippet


#types
snippet qvar "quoted variable"
"\$\{var.$1\}"
endsnippet

snippet res "resouce as a variable" w
\$\{$1.$2\}
endsnippet

snippet var "regular var" w
\$\{var.$1\}
endsnippet

snippet arr "make a array"
[ $1 ]
endsnippet

snippet =
$1 = $2
endsnippet
